{"ast":null,"code":"var _jsxFileName = \"/Users/mj.paler/web-hooks-demo/src/TaskManager.js\",\n  _s = $RefreshSig$();\n// src/TaskManager.js\nimport React, { useState, useContext, useRef, useCallback } from 'react';\nimport { TaskContext } from './TaskContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskManager = () => {\n  _s();\n  const [newTask, setNewTask] = useState('');\n  const [editingTaskId, setEditingTaskId] = useState(null);\n  const {\n    tasks,\n    dispatch\n  } = useContext(TaskContext);\n  const inputRef = useRef(null);\n  const addOrEditTask = useCallback(() => {\n    if (newTask.trim()) {\n      if (editingTaskId) {\n        dispatch({\n          type: 'editTask',\n          id: editingTaskId,\n          text: newTask\n        });\n        setEditingTaskId(null);\n      } else {\n        dispatch({\n          type: 'addTask',\n          text: newTask\n        });\n      }\n      setNewTask('');\n      inputRef.current.focus();\n    }\n  }, [newTask, editingTaskId, dispatch]);\n  const toggleComplete = useCallback(id => {\n    dispatch({\n      type: 'completeTask',\n      id\n    });\n  }, [dispatch]);\n  const startEditing = useCallback(task => {\n    setNewTask(task.text);\n    setEditingTaskId(task.id);\n    inputRef.current.focus();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: \"text\",\n      value: newTask,\n      onChange: e => setNewTask(e.target.value),\n      placeholder: \"Enter your task\",\n      className: \"taskField\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addOrEditTask,\n      children: editingTaskId ? 'Edit Task' : 'Add Task'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        listStyle: 'none'\n      },\n      children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: task.completed,\n          onChange: () => toggleComplete(task.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            textDecoration: task.completed ? 'line-through' : 'none'\n          },\n          children: [\"Task \", index + 1, \": \", task.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => startEditing(task),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => dispatch({\n            type: 'deleteTask',\n            id: task.id\n          }),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskManager, \"LCdKSXrai8bMoyxATRhevDl5rxA=\");\n_c = TaskManager;\nexport default TaskManager;\nvar _c;\n$RefreshReg$(_c, \"TaskManager\");","map":{"version":3,"names":["React","useState","useContext","useRef","useCallback","TaskContext","jsxDEV","_jsxDEV","TaskManager","_s","newTask","setNewTask","editingTaskId","setEditingTaskId","tasks","dispatch","inputRef","addOrEditTask","trim","type","id","text","current","focus","toggleComplete","startEditing","task","children","ref","value","onChange","e","target","placeholder","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","listStyle","map","index","checked","completed","textDecoration","_c","$RefreshReg$"],"sources":["/Users/mj.paler/web-hooks-demo/src/TaskManager.js"],"sourcesContent":["// src/TaskManager.js\nimport React, { useState, useContext, useRef, useCallback } from 'react';\nimport { TaskContext } from './TaskContext';\n\nconst TaskManager = () => {\n    const [newTask, setNewTask] = useState('');\n    const [editingTaskId, setEditingTaskId] = useState(null);\n    const { tasks, dispatch } = useContext(TaskContext);\n    const inputRef = useRef(null);\n\n    const addOrEditTask = useCallback(() => {\n        if (newTask.trim()) {\n            if (editingTaskId) {\n                dispatch({ type: 'editTask', id: editingTaskId, text: newTask });\n                setEditingTaskId(null);\n            } else {\n                dispatch({ type: 'addTask', text: newTask });\n            }\n            setNewTask('');\n            inputRef.current.focus();\n        }\n    }, [newTask, editingTaskId, dispatch]);\n\n    const toggleComplete = useCallback((id) => {\n        dispatch({ type: 'completeTask', id });\n    }, [dispatch]);\n\n    const startEditing = useCallback((task) => {\n        setNewTask(task.text);\n        setEditingTaskId(task.id);\n        inputRef.current.focus();\n    }, []);\n\n    return (\n        <div>\n            <input\n                ref={inputRef}\n                type=\"text\"\n                value={newTask}\n                onChange={(e) => setNewTask(e.target.value)}\n                placeholder=\"Enter your task\"\n                className='taskField'\n            />\n            <button onClick={addOrEditTask}>{editingTaskId ? 'Edit Task' : 'Add Task'}</button>\n            <ul style={{ listStyle: 'none' }}>\n                {tasks.map((task, index) => (\n                    <li key={task.id}>\n                        <input\n                            type=\"checkbox\"\n                            checked={task.completed}\n                            onChange={() => toggleComplete(task.id)}\n                        />\n                        <span style={{ textDecoration: task.completed ? 'line-through' : 'none' }}>\n                            Task {index + 1}: {task.text}\n                        </span>\n                        <button onClick={() => startEditing(task)}>Edit</button>\n                        <button onClick={() => dispatch({ type: 'deleteTask', id: task.id })}>\n                            Delete\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default TaskManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}